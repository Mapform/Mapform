// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters", "postgresqlExtensions"]
}

generator zod {
    provider                  = "zod-prisma-types"
    output                    = "./zod"
    // addIncludeType         = false
    // addSelectType          = false
    // addInputTypeValidation = false
    createRelationValuesTypes = true
}

datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    directUrl  = env("DIRECT_URL")
    extensions = [postgis]
}

// Managed through Clerk and synced with Prisma
model User {
    id                      String                   @id // Clerk id
    firstName               String
    lastName                String
    /// @zod.string.email()
    email                   String
    imageUrl                String?
    organizationMemberships OrganizationMembership[]
    workspaceMemberships    WorkspaceMembership[]
}

// Managed through Clerk and synced with Prisma
model Organization {
    id         String                   @id // Clerk id
    name       String
    slug       String                   @unique
    imageUrl   String?
    members    OrganizationMembership[]
    workspaces Workspace[]
}

// Managed through Clerk and synced with Prisma
model OrganizationMembership {
    id             String       @id // Clerk id
    organizationId String
    userId         String
    role           String
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

enum WorkspaceMembershipRole {
    OWNER
    MEMBER
}

// We store as an explicit many-to-many relationship because we need to store
// additional details on the relationship itself, namely role.
model WorkspaceMembership {
    id          String                  @id @default(uuid())
    userId      String
    workspaceId String
    role        WorkspaceMembershipRole
    user        User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspace   Workspace               @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Workspace {
    id             String                @id @default(uuid())
    name           String
    slug           String
    members        WorkspaceMembership[]
    organizationId String
    organization   Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    forms          Form[]

    @@unique([organizationId, slug])
}

model Form {
    id              String           @id @default(uuid())
    name            String
    slug            String
    isPublished     Boolean          @default(false)
    isDirty         Boolean          @default(false)
    stepOrder       String[]
    steps           Step[]           @relation(name: "Steps")
    workspaceId     String
    workspace       Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    formSubmission  FormSubmission[]
    publishedFormId String?          @unique
    publishedForm   Form?            @relation("PublishedVersion", fields: [publishedFormId], references: [id])
    draftForm       Form?            @relation("PublishedVersion")

    @@unique([workspaceId, slug, isPublished])
}

model Step {
    id          String   @id @default(uuid())
    title       String?
    description Json?
    zoom        Int
    pitch       Int
    bearing     Int
    formId      String?
    form        Form?    @relation(name: "Steps", fields: [formId], references: [id])
    locationId  String   @unique
    location    Location @relation(fields: [locationId], references: [id])

    shortTextInputResponses ShortTextInputResponse[]
}

model FormSubmission {
    id                     String                   @id @default(uuid())
    formId                 String
    form                   Form                     @relation(fields: [formId], references: [id])
    shortTextInputResponse ShortTextInputResponse[]
}

model ShortTextInputResponse {
    id               String @id @default(uuid())
    blockNoteId      String
    title            String
    value            String
    stepId           String
    formSubmissionId String

    step           Step           @relation(fields: [stepId], references: [id])
    formSubmission FormSubmission @relation(fields: [formSubmissionId], references: [id])

    @@unique([blockNoteId, formSubmissionId])
}

model Location {
    id   String                               @id @default(uuid())
    geom Unsupported("geometry(Point, 4326)")
    step Step?

    @@index([geom], name: "location_idx", type: Gist)
}
