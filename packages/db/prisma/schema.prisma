// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters", "postgresqlExtensions"]
}

generator zod {
    provider                  = "zod-prisma-types"
    output                    = "./zod"
    createRelationValuesTypes = true
}

generator json {
    provider = "prisma-json-types-generator"
}

datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    directUrl  = env("DIRECT_URL")
    extensions = [postgis]
}

// Managed through Clerk and synced with Prisma
model User {
    id                      String                   @id // Clerk id
    firstName               String
    lastName                String
    /// @zod.string.email()
    email                   String
    imageUrl                String?
    organizationMemberships OrganizationMembership[]
    workspaceMemberships    WorkspaceMembership[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Managed through Clerk and synced with Prisma
model Organization {
    id         String                   @id // Clerk id
    name       String
    slug       String                   @unique
    imageUrl   String?
    members    OrganizationMembership[]
    workspaces Workspace[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Managed through Clerk and synced with Prisma
model OrganizationMembership {
    id             String       @id // Clerk id
    organizationId String
    userId         String
    role           String
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum WorkspaceMembershipRole {
    OWNER
    MEMBER
}

// We store as an explicit many-to-many relationship because we need to store
// additional details on the relationship itself, namely role.
model WorkspaceMembership {
    id          String                  @id @default(uuid())
    userId      String
    workspaceId String
    role        WorkspaceMembershipRole
    user        User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspace   Workspace               @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Workspace {
    id             String                @id @default(uuid())
    name           String
    slug           String
    members        WorkspaceMembership[]
    organizationId String
    organization   Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    forms          Form[]
    datasets       Dataset[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([organizationId, slug])
}

model Form {
    id             String           @id @default(uuid())
    name           String
    slug           String
    isRoot         Boolean          @default(false)
    isDirty        Boolean          @default(false)
    isClosed       Boolean          @default(false)
    // Array of step IDs
    stepOrder      String[]
    steps          Step[]           @relation(name: "Steps")
    dataTracks     DataTrack[]      @relation(name: "DataTracks")
    workspaceId    String
    workspace      Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    formSubmission FormSubmission[]
    rootFormId     String?
    rootForm       Form?            @relation("FormVersions", fields: [rootFormId], references: [id])
    formVersions   Form[]           @relation("FormVersions")
    version        Int?
    // Each draft form has its own dataset, representing the form submissions
    datasetId      String?          @unique
    dataset        Dataset?         @relation(fields: [datasetId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([workspaceId, slug, version])
}

enum ContentViewType {
    FULL
    PARTIAL
    HIDDEN
}

model Step {
    id              String          @id @default(uuid())
    title           String?
    /// [DocumentType]
    description     Json?
    zoom            Int
    pitch           Int
    bearing         Int
    formId          String?
    form            Form?           @relation(name: "Steps", fields: [formId], references: [id], onDelete: Cascade)
    locationId      Int             @unique
    location        Location        @relation(fields: [locationId], references: [id], onDelete: Cascade)
    contentViewType ContentViewType @default(PARTIAL)

    datasetColumns Column[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model DataTrack {
    id             String   @id @default(uuid())
    tempId         String?  @unique
    startStepIndex Int
    endStepIndex   Int
    formId         String?
    form           Form?    @relation(name: "DataTracks", fields: [formId], references: [id], onDelete: Cascade)
    // Array of layer IDs
    layerOrder     String[]
    layers         Layer[]
}

model FormSubmission {
    id              String @id @default(uuid())
    publishedFormId String
    publishedForm   Form   @relation(fields: [publishedFormId], references: [id], onDelete: Cascade)

    rowId String @unique
    row   Row    @relation(fields: [rowId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Location {
    id   Int                                  @id @default(autoincrement())
    geom Unsupported("geometry(Point, 4326)")
    step Step?

    @@index([geom], name: "location_idx", type: Gist)
}

model Dataset {
    id          String    @id @default(uuid())
    name        String
    columns     Column[]  @relation("DatasetColumns")
    rows        Row[]     @relation("DatasetRows")
    form        Form?
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    layers      Layer[]
}

model Column {
    id       String     @id @default(uuid())
    name     String
    dataType ColumnType

    // Only for datasets belonging to a form
    blockNoteId String? @unique

    datasetId String
    dataset   Dataset @relation("DatasetColumns", fields: [datasetId], references: [id])

    // Step is only for datasets belonging to a form
    step   Step?   @relation(fields: [stepId], references: [id], onDelete: Cascade)
    stepId String?

    cellValues  CellValue[]  @relation("ColumnCellValues")
    pointLayers PointLayer[]

    @@unique([datasetId, name])
}

model Row {
    id        String  @id @default(uuid())
    datasetId String
    dataset   Dataset @relation("DatasetRows", fields: [datasetId], references: [id])

    formSubmission FormSubmission?

    cellValues CellValue[] @relation("RowCellValues")
}

model CellValue {
    id       String @id @default(uuid())
    rowId    String
    columnId String
    column   Column @relation("ColumnCellValues", fields: [columnId], references: [id])
    row      Row    @relation("RowCellValues", fields: [rowId], references: [id])

    boolCell   BoolCell?
    stringCell StringCell?
    pointCell  PointCell?

    @@unique([rowId, columnId])
}

model BoolCell {
    id          String    @id @default(uuid())
    cellValueId String    @unique
    value       Boolean
    cellValue   CellValue @relation(fields: [cellValueId], references: [id])
}

model StringCell {
    id          String    @id @default(uuid())
    cellValueId String    @unique
    value       String
    cellValue   CellValue @relation(fields: [cellValueId], references: [id])
}

model PointCell {
    id          String                               @id @default(uuid())
    // This needs to be lowercase for Prisma executeRaw to work
    cellvalueid String                               @unique
    value       Unsupported("geometry(Point, 4326)")
    cellValue   CellValue                            @relation(fields: [cellvalueid], references: [id])

    @@index([value], name: "point_idx", type: Gist)
}

enum ColumnType {
    STRING
    BOOL
    POINT
}

model Layer {
    id          String      @id @default(uuid())
    name        String?
    type        LayerType
    pointLayer  PointLayer?
    dataTrackId String
    dataTrack   DataTrack?  @relation(fields: [dataTrackId], references: [id], onDelete: Cascade)
    datasetId   String
    dataset     Dataset     @relation(fields: [datasetId], references: [id], onDelete: Cascade)
}

model PointLayer {
    id      String @id @default(uuid())
    layerId String @unique
    layer   Layer  @relation(fields: [layerId], references: [id], onDelete: Cascade)

    // Needed for identifying PointCells
    pointColumnId String
    pointColumn   Column @relation(fields: [pointColumnId], references: [id], onDelete: Cascade)
}

enum LayerType {
    POINT
}
