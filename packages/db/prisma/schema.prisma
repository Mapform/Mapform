// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters", "postgresqlExtensions"]
}

generator zod {
    provider                  = "zod-prisma-types"
    output                    = "./zod"
    // addIncludeType         = false
    // addSelectType          = false
    // addInputTypeValidation = false
    createRelationValuesTypes = true
}

datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    directUrl  = env("DIRECT_URL")
    extensions = [postgis]
}

// Managed through Clerk and synced with Prisma
model User {
    id                      String                   @id // Clerk id
    firstName               String
    lastName                String
    /// @zod.string.email()
    email                   String
    imageUrl                String?
    organizationMemberships OrganizationMembership[]
    workspaceMemberships    WorkspaceMembership[]
}

// Managed through Clerk and synced with Prisma
model Organization {
    id         String                   @id // Clerk id
    name       String
    slug       String                   @unique
    imageUrl   String?
    members    OrganizationMembership[]
    workspaces Workspace[]
}

// Managed through Clerk and synced with Prisma
model OrganizationMembership {
    id             String       @id // Clerk id
    organizationId String
    userId         String
    role           String
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

enum WorkspaceMembershipRole {
    OWNER
    MEMBER
}

// We store as an explicit many-to-many relationship because we need to store
// additional details on the relationship itself, namely role.
model WorkspaceMembership {
    id          String                  @id @default(uuid())
    userId      String
    workspaceId String
    role        WorkspaceMembershipRole
    user        User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspace   Workspace               @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Workspace {
    id             String                @id @default(uuid())
    name           String
    slug           String
    members        WorkspaceMembership[]
    organizationId String
    organization   Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    forms          Form[]

    @@unique([organizationId, slug])
}

model Form {
    id             String    @id @default(uuid())
    name           String
    slug           String
    stepOrder      String[]
    publishedSteps Step[]    @relation(name: "PublishedSteps")
    draftSteps     Step[]    @relation(name: "DraftSteps")
    workspaceId    String
    workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    @@unique([workspaceId, slug])
}

model Step {
    id          String  @id @default(uuid())
    title       String?
    description Json?
    zoom        Int
    pitch       Int
    bearing     Int

    formOfDraftStepId     String?
    formOfPublishedStepId String?
    formOfDraftStep       Form?   @relation(name: "DraftSteps", fields: [formOfDraftStepId], references: [id])
    formOfPublishedStep   Form?   @relation(name: "PublishedSteps", fields: [formOfPublishedStepId], references: [id])

    // inputQuestions InputQuestion[]

    locationId String   @unique
    location   Location @relation(fields: [locationId], references: [id])
}

// WIP - Figure out response models
// model InputQuestion {
//     id        String                  @id
//     stepId    String
//     step      Step                    @relation(fields: [stepId], references: [id])
//     responses InputQuestionResponse[]
// }

// model InputQuestionResponse {
//     id              String        @id
//     inputQuestionId String
//     value           String
//     inputQuestion   InputQuestion @relation(fields: [inputQuestionId], references: [id])
// }

model Location {
    id   String                               @id @default(uuid())
    geom Unsupported("geometry(Point, 4326)")
    step Step?

    @@index([geom], name: "location_idx", type: Gist)
}
