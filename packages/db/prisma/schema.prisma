// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters", "postgresqlExtensions"]
}

generator zod {
    provider                  = "zod-prisma-types"
    output                    = "./zod"
    // addIncludeType         = false
    // addSelectType          = false
    // addInputTypeValidation = false
    createRelationValuesTypes = true
}

generator json {
    provider = "prisma-json-types-generator"
}

datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    directUrl  = env("DIRECT_URL")
    extensions = [postgis]
}

// Managed through Clerk and synced with Prisma
model User {
    id                      String                   @id // Clerk id
    firstName               String
    lastName                String
    /// @zod.string.email()
    email                   String
    imageUrl                String?
    organizationMemberships OrganizationMembership[]
    workspaceMemberships    WorkspaceMembership[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Managed through Clerk and synced with Prisma
model Organization {
    id         String                   @id // Clerk id
    name       String
    slug       String                   @unique
    imageUrl   String?
    members    OrganizationMembership[]
    workspaces Workspace[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Managed through Clerk and synced with Prisma
model OrganizationMembership {
    id             String       @id // Clerk id
    organizationId String
    userId         String
    role           String
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum WorkspaceMembershipRole {
    OWNER
    MEMBER
}

// We store as an explicit many-to-many relationship because we need to store
// additional details on the relationship itself, namely role.
model WorkspaceMembership {
    id          String                  @id @default(uuid())
    userId      String
    workspaceId String
    role        WorkspaceMembershipRole
    user        User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspace   Workspace               @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Workspace {
    id             String                @id @default(uuid())
    name           String
    slug           String
    members        WorkspaceMembership[]
    organizationId String
    organization   Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    forms          Form[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([organizationId, slug])
}

model Form {
    id             String           @id @default(uuid())
    name           String
    slug           String
    isDraft        Boolean          @default(false)
    isDirty        Boolean          @default(false)
    isClosed       Boolean          @default(false)
    stepOrder      String[]
    steps          Step[]           @relation(name: "Steps")
    workspaceId    String
    workspace      Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    formSubmission FormSubmission[]
    draftFormId    String?
    draftForm      Form?            @relation("FormVersions", fields: [draftFormId], references: [id])
    formVersions   Form[]           @relation("FormVersions")
    version        Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([workspaceId, slug, version])
}

model Step {
    id          String   @id @default(uuid())
    title       String?
    /// [DocumentType]
    description Json?
    zoom        Int
    pitch       Int
    bearing     Int
    formId      String?
    form        Form?    @relation(name: "Steps", fields: [formId], references: [id], onDelete: Cascade)
    locationId  Int      @unique
    location    Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

    inputResponses    InputResponse[]
    locationResponses LocationResponse[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model FormSubmission {
    id                String             @id @default(uuid())
    formId            String
    form              Form               @relation(fields: [formId], references: [id], onDelete: Cascade)
    inputResponses    InputResponse[]
    locationResponses LocationResponse[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model InputResponse {
    id               String @id @default(uuid())
    blockNoteId      String
    value            String
    formSubmissionId String

    formSubmission FormSubmission @relation(fields: [formSubmissionId], references: [id], onDelete: Cascade)
    step           Step           @relation(fields: [stepId], references: [id], onDelete: Cascade)
    stepId         String

    @@unique([blockNoteId, formSubmissionId])
}

model LocationResponse {
    id               String @id @default(uuid())
    blockNoteId      String
    locationId       Int    @unique
    formSubmissionId String

    location       Location       @relation(fields: [locationId], references: [id])
    formSubmission FormSubmission @relation(fields: [formSubmissionId], references: [id], onDelete: Cascade)
    step           Step           @relation(fields: [stepId], references: [id], onDelete: Cascade)
    stepId         String

    @@unique([blockNoteId, formSubmissionId])
}

model Location {
    id               Int                                  @id @default(autoincrement())
    geom             Unsupported("geometry(Point, 4326)")
    step             Step?
    locationResponse LocationResponse?

    @@index([geom], name: "location_idx", type: Gist)
}
